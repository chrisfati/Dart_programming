void main() {
  // List of item prices in the shopping cart
  List<double> cart = [50.0, 30.0, 5.0, 100.0, 8.0, 20.0];

  // Filter out items below $10 using an anonymous function
  List<double> filteredCart = cart.where((price) => price >= 10.0).toList();
  print("Filtered Cart (items >= \$10): $filteredCart");

  // Apply a 10% discount to all items using a higher-order function
  List<double> discountedCart = applyDiscount(filteredCart, (price) => price * 0.90);
  print("Cart After Discount: $discountedCart");

  // Calculate the total price with a 5% tax
  double totalPrice = calculateTotal(discountedCart, taxRate: 0.05);
  print("Total Price after Tax: \$${totalPrice.toStringAsFixed(2)}");

  // Apply an additional special discount based on the factorial of item count
  int itemCount = discountedCart.length;
  double factorialDiscount = calculateFactorialDiscount(itemCount);
  double finalPrice = totalPrice * (1 - factorialDiscount / 100);
  
  print("Final Price after Factorial Discount ($itemCount!% off): \$${finalPrice.toStringAsFixed(2)}");
}

// Function to calculate the total price with optional tax
double calculateTotal(List<double> prices, {double taxRate = 0.0}) {
  double subtotal = prices.reduce((sum, price) => sum + price);
  return subtotal * (1 + taxRate);
}

// Higher-order function to apply a discount to each item
List<double> applyDiscount(List<double> prices, double Function(double) discountFunction) {
  return prices.map(discountFunction).toList();
}

// Recursive function to calculate factorial discount
int calculateFactorialDiscount(int n) {
  if (n <= 1) return 1;
  return n * calculateFactorialDiscount(n - 1);
}
